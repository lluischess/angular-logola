import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../../services/auth.service';
import { BackofficeLayoutComponent } from '../backoffice-layout/backoffice-layout.component';
import { CategoriesService, Category, CategoryStats } from '../../services/categories.service';

@Component({
  selector: 'app-categorias',
  standalone: true,
  imports: [CommonModule, BackofficeLayoutComponent],
  templateUrl: './categorias.component.html',
  styleUrl: './categorias.component.css'
})
export class CategoriasComponent implements OnInit {
  categorias: Category[] = [];
  stats: CategoryStats | null = null;
  isLoading = true;
  error: string | null = null;

  constructor(
    private router: Router,
    private authService: AuthService,
    private categoriesService: CategoriesService
  ) {}

  ngOnInit(): void {
    this.loadCategorias();
    // Las estad√≠sticas se cargan despu√©s de las categor√≠as en loadCategorias()
  }

  /**
   * Cargar lista de categor√≠as desde el backend
   */
  loadCategorias(): void {
    console.log('üîÑ Iniciando carga de categor√≠as...');
    this.isLoading = true;
    this.error = null;

    this.categoriesService.getCategories({
      sortBy: 'orden',
      sortOrder: 'asc'
    }).subscribe({
      next: (response) => {
        console.log('‚úÖ Respuesta del backend para categor√≠as:', response);

        // El backend devuelve {categories: [...]} pero esperamos {data: [...]}
        // Vamos a adaptar la respuesta
        let categorias: Category[] = [];

        if (response && typeof response === 'object') {
          // Si la respuesta tiene la propiedad 'categories' (formato actual del backend)
          if ('categories' in response && Array.isArray((response as any).categories)) {
            categorias = (response as any).categories;
            console.log('üìä Datos de categor√≠as desde response.categories:', categorias);
          }
          // Si la respuesta tiene la propiedad 'data' (formato esperado)
          else if ('data' in response && Array.isArray((response as any).data)) {
            categorias = (response as any).data;
            console.log('üìä Datos de categor√≠as desde response.data:', categorias);
          }
          // Si la respuesta es directamente un array
          else if (Array.isArray(response)) {
            categorias = response as Category[];
            console.log('üìä Datos de categor√≠as como array directo:', categorias);
          }
        }

        console.log('üìà Cantidad de categor√≠as procesadas:', categorias.length);

        this.categorias = categorias;
        this.isLoading = false;

        console.log('üéØ Categor√≠as asignadas al componente:', this.categorias);

        // Cargar estad√≠sticas despu√©s de tener las categor√≠as
        this.loadStats();
      },
      error: (error) => {
        console.error('‚ùå Error cargando categor√≠as:', error);
        console.error('üîç Detalles del error:', {
          status: error.status,
          statusText: error.statusText,
          message: error.message,
          url: error.url
        });

        this.error = 'Error al cargar las categor√≠as. Por favor, intenta de nuevo.';
        this.categorias = [];
        this.isLoading = false;
      }
    });
  }

  /**
   * Cargar estad√≠sticas de categor√≠as
   */
  private loadStats(): void {
    console.log('üìä Iniciando carga de estad√≠sticas de categor√≠as...');

    this.categoriesService.getStats().subscribe({
      next: (stats) => {
        console.log('‚úÖ Respuesta del backend para estad√≠sticas:', stats);
        console.log('üîç Tipo de respuesta:', typeof stats);
        console.log('üîç Propiedades de la respuesta:', Object.keys(stats || {}));

        // Adaptar la respuesta del backend si es necesario
        let processedStats: CategoryStats | null = null;

        if (stats && typeof stats === 'object') {
          // Si la respuesta tiene las propiedades esperadas directamente
          if ('total' in stats && 'publicadas' in stats) {
            processedStats = stats as CategoryStats;
            console.log('üìà Estad√≠sticas procesadas (formato directo):', processedStats);
          }
          // Si la respuesta est√° anidada en otra propiedad
          else if ('stats' in stats) {
            processedStats = (stats as any).stats as CategoryStats;
            console.log('üìà Estad√≠sticas procesadas (formato anidado):', processedStats);
          }
          // Si necesitamos calcular las estad√≠sticas desde las categor√≠as
          else {
            console.log('‚ö†Ô∏è Formato de estad√≠sticas no reconocido, calculando desde categor√≠as...');
            if (this.categorias && this.categorias.length > 0) {
              const total = this.categorias.length;
              const publicadas = this.categorias.filter(cat => cat.publicado).length;
              const noPublicadas = total - publicadas;
              const configuracionEspecial = this.categorias.filter(cat => cat.configuracionEspecial).length;

              processedStats = {
                total,
                publicadas,
                noPublicadas,
                configuracionEspecial
              };
              console.log('üìà Estad√≠sticas calculadas manualmente:', processedStats);
            }
          }
        }

        this.stats = processedStats;
        console.log('üéØ Estad√≠sticas asignadas al componente:', this.stats);
      },
      error: (error) => {
        console.error('‚ùå Error cargando estad√≠sticas:', error);
        console.error('üîç Detalles del error de estad√≠sticas:', {
          status: error.status,
          statusText: error.statusText,
          message: error.message,
          url: error.url
        });

        // Si hay error, calcular estad√≠sticas desde las categor√≠as cargadas
        if (this.categorias && this.categorias.length > 0) {
          const total = this.categorias.length;
          const publicadas = this.categorias.filter(cat => cat.publicado).length;
          const noPublicadas = total - publicadas;
          const configuracionEspecial = this.categorias.filter(cat => cat.configuracionEspecial).length;

          this.stats = {
            total,
            publicadas,
            noPublicadas,
            configuracionEspecial
          };
          console.log('üîÑ Estad√≠sticas calculadas como fallback:', this.stats);
        }
      }
    });
  }

  /**
   * Alternar estado de publicaci√≥n de una categor√≠a
   */
  togglePublicacion(categoria: Category): void {
    if (!categoria._id) return;

    const newStatus = !categoria.publicado;

    this.categoriesService.updateCategory(categoria._id, { publicado: newStatus }).subscribe({
      next: (updatedCategory) => {
        categoria.publicado = updatedCategory.publicado;
        console.log(`Categor√≠a "${categoria.nombre}" ${categoria.publicado ? 'publicada' : 'despublicada'}`);
      },
      error: (error) => {
        console.error('Error actualizando categor√≠a:', error);
        // Revertir el cambio en caso de error
        categoria.publicado = !newStatus;
      }
    });
  }

  /**
   * Obtener clase CSS para el estado de publicaci√≥n
   */
  getEstadoClass(publicado: boolean): string {
    return publicado ? 'badge-success' : 'badge-warning';
  }

  /**
   * Obtener texto del estado de publicaci√≥n
   */
  getEstadoTexto(publicado: boolean): string {
    return publicado ? 'Publicada' : 'Borrador';
  }

  /**
   * Obtener n√∫mero de categor√≠as publicadas
   */
  getCategoriasPublicadas(): number {
    if (this.stats) {
      return this.stats.publicadas;
    }
    return this.categorias.filter(cat => cat.publicado).length;
  }

  /**
   * Obtener total de productos en todas las categor√≠as
   */
  getTotalProductos(): number {
    return this.categorias.reduce((sum, cat) => sum + (cat.productCount || 0), 0);
  }

  /**
   * Navegar a crear nueva categor√≠a
   */
  createCategoria(): void {
    this.router.navigate(['/logoadmin/categorias/nueva']);
  }

  /**
   * Navegar a editar categor√≠a
   */
  editCategoria(id: string): void {
    this.router.navigate(['/logoadmin/categorias/editar', id]);
  }

  /**
   * Eliminar categor√≠a
   */
  deleteCategoria(categoria: Category): void {
    if (!categoria._id) return;

    if (confirm(`¬øEst√°s seguro de que quieres eliminar la categor√≠a "${categoria.nombre}"?`)) {
      this.categoriesService.deleteCategory(categoria._id).subscribe({
        next: () => {
          console.log(`Categor√≠a "${categoria.nombre}" eliminada correctamente`);
          this.loadCategorias(); // Recargar la lista
        },
        error: (error) => {
          console.error('Error eliminando categor√≠a:', error);
          alert('Error al eliminar la categor√≠a. Por favor, intenta de nuevo.');
        }
      });
    }
  }
}
